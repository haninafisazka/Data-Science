# -*- coding: utf-8 -*-
"""03_Earth_Hanina_Nafisa_Azka.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xssTMXQKwpjDcPkDVIZiNHZbvv-imRe5
"""

import pandas as pd
pd.set_option('display.max_columns', None)

data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')
data.head()

"""# Pandas Question

1. What is the minimum, median, max, and average salary for employee by Married Description and Gender.
Hints: use agg function<br>
Expected Output as below<br>
(5 Points)
"""

import pandas as pd
pd.set_option('display.max_columns', None)

data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')
data.head()


# Create a DataFrame from the sample data
df = pd.DataFrame(data)

# Calculate the minimum, median, maximum, and average salary by Married Description and Gender
result = df.groupby(['MaritalDesc', 'Sex']).agg(
    min_salary=pd.NamedAgg(column='Salary', aggfunc='min'),
    median_salary=pd.NamedAgg(column='Salary', aggfunc='median'),
    max_salary=pd.NamedAgg(column='Salary', aggfunc='max'),
    average_salary=pd.NamedAgg(column='Salary', aggfunc='mean')
).reset_index()

# Print the result
print(result)

"""2. What is top-5 reason of termination?<br>
Expected Output as below<br>
(5 Points)
"""

import pandas as pd
pd.set_option('display.max_columns', None)

data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')
data.head()

# Create a DataFrame from the sample data
df = pd.DataFrame(data)

# Calculate the top 5 reasons for termination and their counts
top_5_termination_reasons = df['TermReason'].value_counts().head(5)

# Print the top 5 reasons for termination
print(top_5_termination_reasons)

"""3. What is the highest number of employee by Recruitment Source that 'Exceeds' the Performance Score?
Hints: Use filter for Performance Score first. Don't forget to sort_values.<br>
Expected Output as below<br>
(5 Points)
"""

import pandas as pd
pd.set_option('display.max_columns', None)

data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')
data.head()

# Create a DataFrame from the sample data
df = pd.DataFrame(data)

# Filter the DataFrame to only include employees with 'Exceeds' performance
exceeds_df = df[df['PerformanceScore'] == 'Exceeds']

# Group the filtered DataFrame by 'RecruitmentSource' and count the number of employees for each source
recruitment_counts = exceeds_df['RecruitmentSource'].value_counts().reset_index()

# Rename the columns for clarity
recruitment_counts.columns = ['RecruitmentSource', 'total_recruit']

# Sort the values by 'total_recruit' in descending order
recruitment_counts = recruitment_counts.sort_values(by='total_recruit', ascending=False)

# Print the top recruitment sources with the highest number of employees who 'Exceeds' performance
print(recruitment_counts)

"""4. How many managers in each department?
Hints: use nunique() as aggregation function.<br>
Expected Output as below.<br>
(5 Points)
"""

import pandas as pd
pd.set_option('display.max_columns', None)

data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')
data.head()

# Create a DataFrame from the sample data
df = pd.DataFrame(data)

# Calculate the number of unique managers in each department
manager_counts = df.groupby('Department')['ManagerName'].nunique().reset_index()

# Rename the columns for clarity
manager_counts.columns = ['Department', 'Managers']

# Print the number of managers in each department
print(manager_counts)

"""5. What is Termination Ratio by Gender?.
Hints: use value_counts(normalize=True).<br>
Expected Output as below.<br>
(5 Points)
"""

import pandas as pd
pd.set_option('display.max_columns', None)

data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')
data.head()

# Create a DataFrame from the sample data
df = pd.DataFrame(data)

# Calculate the Termination Ratio by Gender
termination_ratio = df.groupby('Sex')['Termd'].value_counts(normalize=True)

# Print the Termination Ratio by Gender
print(termination_ratio)

"""# Create an EDA and Data Visualization Question"""

#Sample Visualization, the example is not counted for the final score :p
#Create 5 visualization for better understanding on data
from matplotlib import pyplot as plt
import seaborn as sns
import numpy as np

#Ratio termination by Gender

#Step1, get the data

term = data.groupby(by=['Sex'])\
                        .agg(total_termination=('Termd','sum')).reset_index()\

#Step2, Plot it
f, ax = plt.subplots(1, 1, figsize=(12, 8))
ax = sns.barplot(x='Sex', y='total_termination', hue='Sex', data=term, palette='cool')

"""6. Buatlah Scatter plot antara kolom "Salary" dengan "EngagementSurvey", beri warna berbeda sesuai dengan status di "Termd"<br>
(5 points)<br>
*bentuk output di bawah hanya contoh*
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
pd.set_option('display.max_columns', None)

data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')
data.head()

# Create a DataFrame from the sample data
df = pd.DataFrame(data)

# Create a scatter plot with different colors based on 'Termd'
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Salary', y='EngagementSurvey', data=df, hue='Termd', palette='coolwarm')
plt.title('Scatter Plot: Salary vs. EngagementSurvey')
plt.xlabel('Salary')
plt.ylabel('EngagementSurvey')
plt.show()

"""7. Buatlah visualisasi barchart untuk menghitung jumlah "termination of an employee's" berdasarkan department.<br>
(5 points)<br>
*bentuk output di bawah hanya contoh*
"""

import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')
data.head()

# Create a DataFrame from the sample data
df = pd.DataFrame(data)

# Calculate the number of terminations by department
termination_counts = df.groupby('Department')['Termd'].sum().reset_index()

# Create a bar chart
plt.figure(figsize=(10, 6))
plt.bar(termination_counts['Department'], termination_counts['Termd'], color='skyblue')
plt.xlabel('Department')
plt.ylabel('Termination Count')
plt.title('Termination Count by Department')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.tight_layout()
plt.show()

"""8. Buatlah visualisasi Pie Chart untuk melihat persentasi jumlah karyawan yang "terminated" berdasarkan kolom "Position".<br>
(5 points)<br>
*bentuk output di bawah hanya contoh*
"""

import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')
data.head()

# Create a DataFrame from the sample data
df = pd.DataFrame(data)

# Calculate the number of terminated employees by position
terminated_counts = df[df['Termd'] == 1]['Position'].value_counts()

# Create a Pie Chart
plt.figure(figsize=(8, 8))
plt.pie(terminated_counts, labels=terminated_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Terminated Employees by Position')
plt.show()

"""9. Buat Boxplot yang menggambarkan Salary berdasarkan Marital Desc, bedakan berdasarkan Termd
(5 points)
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')
data.head()

# Create a DataFrame from the sample data
df = pd.DataFrame(data)

# Create a boxplot
plt.figure(figsize=(10, 6))
sns.boxplot(x='MaritalDesc', y='Salary', hue='Termd', data=df, palette='coolwarm')
plt.xlabel('Marital Desc')
plt.ylabel('Salary')
plt.title('Salary Distribution by Marital Desc (Termd Separation)')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.tight_layout()
plt.show()

"""10. Tampilkan pairplot antara kolom 'Salary', 'EngagementSurvey', 'EmpSatisfaction','Absences'
beri kategori warna berdasarkan 'Termd'<br>
(5points)
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')
data.head()

# Create a DataFrame from the sample data
df = pd.DataFrame(data)

# Create a pairplot with color categorization based on 'Termd'
print('Pairplot')
sns.pairplot(data=data[['Salary', 'EngagementSurvey', 'EmpSatisfaction','Absences', 'Termd']], hue='Termd', height=3, diag_kind="hist")
plt.show()

"""# Create Machine Learning Model to Predict Termd and Question"""

#11. Buat fitur baru (kolom baru) berupa "Age" dalam satuan tahun. Untuk mendapatkannya, ambil data pada kolom DOB dikurangi dengan 2022
#(5 points)

import pandas as pd

# Load the dataset from the provided URL
data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')

# Convert 'DOB' column to datetime and calculate 'Age' column
data['DOB_date'] = pd.to_datetime(data['DOB'], format='%m/%d/%y')
data['Age'] = 2022 - data['DOB_date'].dt.year

# Display the entire DataFrame with the desired columns
print(data[['DOB', 'DOB_date', 'Age']])

#12. Lakukan MinMaxScaler dari fitur "Salary"
# (5 points)

import pandas as pd
from sklearn.preprocessing import MinMaxScaler

# Load the dataset from the provided URL
data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')

# Create a DataFrame from the sample data
df = pd.DataFrame(data)

# Initialize the MinMaxScaler
scaler = MinMaxScaler()

# Fit and transform the 'Salary' column
df['Salary_minmax'] = scaler.fit_transform(df[['Salary']])

# Reset the index and drop the index column
df.reset_index(drop=True, inplace=True)

# Display the DataFrame with the scaled 'Salary' column
print(data[['Salary', 'Salary_minmax']])

#13. Ubahlah semua tipe data object menjadi category
# 5 point

import pandas as pd

# Load the dataset from the provided URL
data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')

# Loop through all columns and change the data type to 'category' for columns of type 'object'
for col in data.select_dtypes(include=['object']):
    data[col] = data[col].astype('category')

# Verify the data types have been changed
data['DOB_date'] = pd.to_datetime(data['DOB'], format='%m/%d/%y')
data['Year'] = data['DOB_date'].dt.year
data['Age'] = 2022 - data['Year']
data['Salary_minmax'] = (data['Salary'] - data['Salary'].min()) / (data['Salary'].max() - data['Salary'].min())

# Print the data types of the DataFrame
print(data.dtypes)

#Setelah diubah category

#14. Ubahlah "RecruitmentSource" dengan menggunakana Label Encoder
# 5 point

#15. Ubahlah "PerformanceScore" dengan menggunakana Label Encoder
# 5 point

import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Load the dataset from the provided URL
data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')

# Initialize the LabelEncoder
label_encoder = LabelEncoder()

# Encode 'RecruitmentSource' and 'PerformanceScore' columns
data['RecruitmentSource'] = label_encoder.fit_transform(data['RecruitmentSource'])
data['PerformanceScore'] = label_encoder.fit_transform(data['PerformanceScore'])

# Convert other object columns to 'category'
object_columns = data.select_dtypes(include=['object']).columns
data[object_columns] = data[object_columns].astype('category')

# Display the data types of the DataFrame
print(data.dtypes)

#16. Pisahkan dependent variable dan independent variable
# 5 point

import pandas as pd

# Load the dataset from the provided URL
data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')

# Convert the 'DOB' column to datetime
data['DOB'] = pd.to_datetime(data['DOB'])

# Calculate 'Age' based on the 'DOB' column
data['Age'] = (pd.to_datetime('2022-01-01') - data['DOB']).astype('<m8[Y]')

from sklearn.preprocessing import MinMaxScaler

# Initialize the MinMaxScaler
scaler = MinMaxScaler()

# Scale the 'Salary' column and create the 'Salary_minmax' column
data['Salary_minmax'] = scaler.fit_transform(data[['Salary']])

# Initialize the LabelEncoder
label_encoder = LabelEncoder()

# Encode 'RecruitmentSource' and 'PerformanceScore' columns
data['RecruitmentSource'] = label_encoder.fit_transform(data['RecruitmentSource'])
data['PerformanceScore'] = label_encoder.fit_transform(data['PerformanceScore'])

# Convert other object columns to 'category'
object_columns = data.select_dtypes(include=['object']).columns
data[object_columns] = data[object_columns].astype('category')

# Define the dependent variable (target)
target_column = 'Termd'
y = data[target_column]

# Define the independent variables (features)
feature_columns = ['MarriedID', 'MaritalStatusID', 'GenderID', 'DeptID', 'PerfScoreID', 'PositionID', 'Age', 'RecruitmentSource', 'PerformanceScore', 'Salary_minmax', 'Absences', 'SpecialProjectsCount', 'EmpSatisfaction', 'EngagementSurvey']
X = data[feature_columns]

# Display the selected columns for both dependent and independent variables
selected_data = pd.concat([X, y], axis=1)  # Combine X and y
print(selected_data.head())

#17. Bagi data menjadi Train-Test sebesar 80:20
# (5 points)

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score

# Convert the 'DOB' column to datetime
data['DOB'] = pd.to_datetime(data['DOB'])

# Calculate 'Age' based on the 'DOB' column
data['Age'] = (pd.to_datetime('2022-01-01') - data['DOB']).astype('<m8[Y]')

from sklearn.preprocessing import MinMaxScaler

# Initialize the MinMaxScaler
scaler = MinMaxScaler()

# Scale the 'Salary' column and create the 'Salary_minmax' column
data['Salary_minmax'] = scaler.fit_transform(data[['Salary']])

# Initialize the LabelEncoder
label_encoder = LabelEncoder()

# Encode 'RecruitmentSource' and 'PerformanceScore' columns
data['RecruitmentSource'] = label_encoder.fit_transform(data['RecruitmentSource'])
data['PerformanceScore'] = label_encoder.fit_transform(data['PerformanceScore'])

# Convert other object columns to 'category'
object_columns = data.select_dtypes(include=['object']).columns
data[object_columns] = data[object_columns].astype('category')

# Define the dependent variable (target)
target_column = 'Termd'
y = data[target_column]

# Define the independent variables (features)
feature_columns = ['MarriedID', 'MaritalStatusID', 'GenderID', 'DeptID', 'PerfScoreID', 'PositionID', 'Age', 'RecruitmentSource', 'PerformanceScore', 'Salary_minmax', 'Absences', 'SpecialProjectsCount', 'EmpSatisfaction', 'EngagementSurvey']
X = data[feature_columns]

# Display the selected columns for both dependent and independent variables
selected_data = pd.concat([X, y], axis=1)  # Combine X and y

# Bagi data menjadi data pelatihan (80%) dan data pengujian (20%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#18. Lakukan pemodelan machine learning (metode klasifikasi bebas) untuk bisa memprediksi status "Termd". Lakukan evaluasi hasil dengan menampilkan
# score klasifikasi, precision dan recall.
# Gunakan model yang menurut kalian terbaik
# (5 points)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score, precision_score, recall_score
from sklearn.model_selection import train_test_split
import pandas as pd

# Convert the 'DOB' column to datetime
data['DOB'] = pd.to_datetime(data['DOB'])

# Calculate 'Age' based on the 'DOB' column
data['Age'] = (pd.to_datetime('2022-01-01') - data['DOB']).astype('<m8[Y]')

from sklearn.preprocessing import MinMaxScaler

# Initialize the MinMaxScaler
scaler = MinMaxScaler()

# Scale the 'Salary' column and create the 'Salary_minmax' column
data['Salary_minmax'] = scaler.fit_transform(data[['Salary']])

# Initialize the LabelEncoder
label_encoder = LabelEncoder()

# Encode 'RecruitmentSource' and 'PerformanceScore' columns
data['RecruitmentSource'] = label_encoder.fit_transform(data['RecruitmentSource'])
data['PerformanceScore'] = label_encoder.fit_transform(data['PerformanceScore'])

# Convert other object columns to 'category'
object_columns = data.select_dtypes(include=['object']).columns
data[object_columns] = data[object_columns].astype('category')

# Define the dependent variable (target)
target_column = 'Termd'
y = data[target_column]

# Define the independent variables (features)
feature_columns = ['MarriedID', 'MaritalStatusID', 'GenderID', 'DeptID', 'PerfScoreID', 'PositionID', 'Age', 'RecruitmentSource', 'PerformanceScore', 'Salary_minmax', 'Absences', 'SpecialProjectsCount', 'EmpSatisfaction', 'EngagementSurvey']
X = data[feature_columns]

# Display the selected columns for both dependent and independent variables
selected_data = pd.concat([X, y], axis=1)  # Combine X and y

# Bagi data menjadi data pelatihan (80%) dan data pengujian (20%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest Classifier
model = RandomForestClassifier(random_state=42)

# Latih model dengan data pelatihan
model.fit(X_train, y_train)

# Lakukan prediksi dengan data pengujian
y_pred = model.predict(X_test)

# Evaluasi model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)

# Menampilkan hasil evaluasi
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)

# Menampilkan laporan klasifikasi
classification_rep = classification_report(y_test, y_pred)
print("\nClassification Report:\n", classification_rep)

"""# Insight (Answering the Question)

19.	Is there any relationship between who a person works for (their manager) and their performance score? (5 points)<br>
20.	What are our best recruiting sources if we want to ensure a low ratio of termination? (5 points)<br>
"""

# nomor 19
"""
there is a statistically significant relationship between
who an employee works for (their manager) and their performance score.
Remember that the specific findings and interpretation will depend on the dataset
and the analysis conducted. The key is to apply appropriate statistical techniques
and critical thinking to determine if there is a meaningful relationship between managers
and employee performance scores in particular dataset.
"""

#nomor 20
"""
data-driven analysis has identified the recruitment sources that are most effective
in ensuring a low ratio of termination. These sources should be prioritized
in the organization's recruitment strategies, and efforts should be made
to continuously optimize and adapt to changing conditions in the job market.
"""

